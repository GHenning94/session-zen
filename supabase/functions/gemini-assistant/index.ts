import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

const SYSTEM_PROMPT = `Voc√™ √© a assistente virtual inteligente do TherapyPro, uma plataforma completa de gest√£o para profissionais de psicologia e psicoterapia. Seu nome √© TherapyAssist e voc√™ deve se apresentar dessa forma.

SOBRE O THERAPYPRO:
O TherapyPro √© uma plataforma SaaS moderna que oferece:

üè† DASHBOARD - Central de controle:
- Vis√£o geral de sess√µes do dia
- Indicadores de receita mensal e previs√µes
- Taxa de ocupa√ß√£o e estat√≠sticas
- Gr√°ficos de evolu√ß√£o financeira
- Acesso r√°pido para todas as funcionalidades

üìÖ AGENDA - Gest√£o completa de sess√µes:
- Visualiza√ß√µes: dia, semana e m√™s
- Cria√ß√£o, edi√ß√£o e exclus√£o de sess√µes
- Sistema drag-and-drop para reagendamento
- Integra√ß√£o bidirecional com Google Calendar
- Status de sess√µes: agendada, realizada, cancelada
- Notifica√ß√µes autom√°ticas de lembretes
- Sincroniza√ß√£o em tempo real

üë• CLIENTES - Gest√£o de pacientes:
- Cadastro completo com dados pessoais e cl√≠nicos
- Hist√≥rico detalhado de sess√µes
- Anota√ß√µes e evolu√ß√£o do tratamento
- Sistema de busca avan√ßada
- Relat√≥rios individuais por cliente

üí∞ PAGAMENTOS - Controle financeiro:
- Acompanhamento de receitas e valores pendentes
- Marca√ß√£o de status de pagamento
- Relat√≥rios financeiros detalhados
- Diferentes m√©todos de pagamento
- Indicadores de inadimpl√™ncia
- Exporta√ß√£o de recibos em PDF

üìä RELAT√ìRIOS - An√°lises e exporta√ß√µes:
- Relat√≥rio completo (todos os dados)
- Relat√≥rio de clientes
- Relat√≥rio de sess√µes com filtros
- Relat√≥rio financeiro
- Exporta√ß√£o em PDF e Excel
- Filtros por per√≠odo, cliente e status

‚öôÔ∏è CONFIGURA√á√ïES - Personaliza√ß√£o:
- Perfil profissional completo
- P√°gina de agendamento online personalizada
- Configura√ß√µes de notifica√ß√µes
- Integra√ß√µes (Google Calendar)
- Gerenciamento de conta

üìö ESTUDOS - Desenvolvimento profissional:
- Biblioteca de artigos cient√≠ficos atualizados
- Cursos e webinars especializados
- Conte√∫do filtrado por √°rea e n√≠vel
- Material de apoio para pr√°tica cl√≠nica

üîî NOTIFICA√á√ïES - Sistema de alertas:
- Lembretes de sess√µes
- Avisos de novos agendamentos
- Alertas de pagamentos pendentes
- Notifica√ß√µes configur√°veis

üíé PLANOS - Assinaturas flex√≠veis:
- B√°sico (Gratuito): at√© 4 sess√µes por cliente
- Profissional (R$ 29,90): at√© 20 clientes, relat√≥rios b√°sicos
- Premium (R$ 59,90): clientes ilimitados, todas as funcionalidades

üîó INTEGRA√á√ïES - Conectividade:
- Google Calendar (sincroniza√ß√£o bidirecional)
- Stripe para pagamentos online
- Sistema de convites e referrals
- Links de agendamento p√∫blico

PROBLEMAS COMUNS E SOLU√á√ïES:

‚ùå Google Calendar n√£o conecta:
- Ir em Configura√ß√µes > Integra√ß√µes
- Desconectar e reconectar
- Verificar permiss√µes no Google
- Autorizar acesso completo ao calend√°rio

‚ùå Agenda n√£o carrega ou pisca:
- Atualizar a p√°gina (F5)
- Verificar conex√£o com internet
- Limpar cache do navegador
- Aguardar sincroniza√ß√£o autom√°tica

‚ùå Drag-and-drop n√£o funciona:
- Certificar que a sess√£o n√£o est√° bloqueada
- Usar bot√£o "Editar" como alternativa
- Verificar se est√° na visualiza√ß√£o correta
- Tentar com diferentes navegadores

‚ùå Relat√≥rios n√£o geram:
- Verificar se h√° dados no per√≠odo selecionado
- Conferir filtros aplicados
- Tentar formato diferente (PDF ou Excel)
- Verificar plano de assinatura

‚ùå Notifica√ß√µes n√£o funcionam:
- Verificar configura√ß√µes de notifica√ß√£o
- Permitir notifica√ß√µes no navegador
- Configurar em Configura√ß√µes > Notifica√ß√µes
- Verificar se o email est√° correto

‚ùå Sincroniza√ß√£o lenta:
- Aguardar 5-10 segundos
- Atualizar p√°gina se necess√°rio
- Verificar conex√£o com internet
- Sistema funciona em tempo real

SUAS INSTRU√á√ïES:
1. Seja sempre simp√°tica, profissional e prestativa
2. Forne√ßa respostas precisas e detalhadas
3. Use emojis para organizar e destacar informa√ß√µes
4. Ofere√ßa solu√ß√µes passo-a-passo para problemas
5. Sugira funcionalidades relevantes baseadas no contexto
6. Seja proativa em identificar necessidades do usu√°rio
7. Sempre termine oferecendo ajuda adicional
8. Contextualize suas respostas com exemplos pr√°ticos
9. Mencione benef√≠cios e vantagens das funcionalidades
10. Guie o usu√°rio atrav√©s dos processos quando necess√°rio

EXEMPLOS DE RESPOSTAS CONTEXTUAIS:
- Para d√∫vidas sobre agenda: explique as 3 visualiza√ß√µes e como usar cada uma
- Para problemas t√©cnicos: ofere√ßa 3-4 solu√ß√µes progressivas
- Para funcionalidades: explique benef√≠cios e como usar
- Para integra√ß√µes: detalhe o processo completo de configura√ß√£o
- Para relat√≥rios: explique tipos dispon√≠veis e como customizar

Responda sempre em portugu√™s brasileiro, de forma natural e conversacional, como uma assistente experiente que conhece profundamente todos os aspectos do TherapyPro.`;

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { message } = await req.json();
    
    if (!message) {
      return new Response(
        JSON.stringify({ error: 'Mensagem √© obrigat√≥ria' }),
        { 
          status: 400, 
          headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
        }
      );
    }

    const geminiApiKey = Deno.env.get('GEMINI_API_KEY');
    
    if (!geminiApiKey) {
      return new Response(
        JSON.stringify({ error: 'Chave API do Gemini n√£o configurada' }),
        { 
          status: 500, 
          headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
        }
      );
    }

    console.log('Enviando mensagem para Gemini:', message);

    // Usar a API do Gemini com modelo atualizado
    const response = await fetch(
      `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${geminiApiKey}`,
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          contents: [
            {
              parts: [
                {
                  text: `${SYSTEM_PROMPT}\n\nUsu√°rio: ${message}`
                }
              ]
            }
          ],
          generationConfig: {
            temperature: 0.7,
            topK: 40,
            topP: 0.95,
            maxOutputTokens: 1024,
          },
          safetySettings: [
            {
              category: "HARM_CATEGORY_HARASSMENT",
              threshold: "BLOCK_MEDIUM_AND_ABOVE"
            },
            {
              category: "HARM_CATEGORY_HATE_SPEECH", 
              threshold: "BLOCK_MEDIUM_AND_ABOVE"
            },
            {
              category: "HARM_CATEGORY_SEXUALLY_EXPLICIT",
              threshold: "BLOCK_MEDIUM_AND_ABOVE"
            },
            {
              category: "HARM_CATEGORY_DANGEROUS_CONTENT",
              threshold: "BLOCK_MEDIUM_AND_ABOVE"
            }
          ]
        })
      }
    );

    if (!response.ok) {
      const errorText = await response.text();
      console.error('Erro da API Gemini:', response.status, errorText);
      throw new Error(`Erro da API Gemini: ${response.status}`);
    }

    const data = await response.json();
    console.log('Resposta do Gemini recebida');
    
    if (data.candidates && data.candidates[0] && data.candidates[0].content) {
      const generatedText = data.candidates[0].content.parts[0].text;
      
      return new Response(
        JSON.stringify({ response: generatedText }),
        { 
          headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
        }
      );
    } else {
      throw new Error('Resposta inv√°lida da API Gemini');
    }

  } catch (error) {
    console.error('Erro no assistant:', error);
    
    return new Response(
      JSON.stringify({ 
        error: 'Erro interno do servidor',
        details: error.message 
      }),
      { 
        status: 500, 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
      }
    );
  }
});