import { useState, useRef, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { MessageCircle, Send, X, Minimize2 } from "lucide-react"
import DOMPurify from 'dompurify'

interface Message {
  id: string
  text: string
  isBot: boolean
  timestamp: Date
}

const ChatBot = () => {
  const [isOpen, setIsOpen] = useState(false)
  const [messages, setMessages] = useState<Message[]>(() => {
    // Recuperar mensagens do localStorage
    const savedMessages = localStorage.getItem('chatbot-messages')
    if (savedMessages) {
      try {
        const parsed = JSON.parse(savedMessages)
        return parsed.map((msg: any) => ({ ...msg, timestamp: new Date(msg.timestamp) }))
      } catch {
        // Se erro na parse, usar mensagem padr√£o
      }
    }
    return [
      {
        id: '1',
        text: 'Ol√°! Sou a assistente virtual do **TherapyPro**. Como posso **ajud√°-lo**?',
        isBot: true,
        timestamp: new Date()
      }
    ]
  })
  const [inputMessage, setInputMessage] = useState('')
  const [isLoading, setIsLoading] = useState(false)
  const messagesEndRef = useRef<HTMLDivElement>(null)

  const getBotResponse = async (userMessage: string): Promise<string> => {
    try {
      console.log('Enviando mensagem para Gemini:', userMessage)
      
      const response = await fetch(`https://ykwszazxigjivjkagjmf.supabase.co/functions/v1/gemini-assistant`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${import.meta.env.VITE_SUPABASE_ANON_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inlrd3N6YXp4aWdqaXZqa2Fnam1mIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTMzODE2MTUsImV4cCI6MjA2ODk1NzYxNX0.utJMKfG-4rJH0jfzG3WLAsCwx5tGE4DgxwJN2Z8XeT4'}`,
        },
        body: JSON.stringify({ message: userMessage }),
      })

      console.log('Resposta do Gemini:', response.status)

      if (!response.ok) {
        const errorText = await response.text()
        console.error('Erro da API:', errorText)
        throw new Error(`API Error: ${response.status} - ${errorText}`)
      }

      const data = await response.json()
      console.log('Dados recebidos:', data)
      
      if (data.response) {
        return data.response
      } else if (data.error) {
        throw new Error(data.error)
      } else {
        throw new Error('Resposta inv√°lida da API')
      }
    } catch (error) {
      console.error('Erro completo ao consultar Gemini:', error)
      return getBotResponseLocal(userMessage)
    }
  }

  const getBotResponseLocal = (userMessage: string): string => {
    const message = userMessage.toLowerCase()
    
    // Sistema inteligente de respostas baseado em contexto e palavras-chave
    
    // Dashboard
    if (message.includes('dashboard') || message.includes('painel') || message.includes('in√≠cio')) {
      return 'üìä DASHBOARD: Sua central de controle! Aqui voc√™ v√™: sess√µes de hoje (3), receita prevista (R$ 450), taxa de ocupa√ß√£o (13%). Clique nos cards para navegar diretamente para cada se√ß√£o. O gr√°fico mostra evolu√ß√£o mensal da receita.'
    }
    
    // Agenda - detalhado
    if (message.includes('agenda') || message.includes('agendar') || message.includes('sess√£o') || message.includes('hor√°rio')) {
      if (message.includes('como') || message.includes('usar') || message.includes('utilizar')) {
        return 'üìÖ COMO USAR AGENDA: 1) Clique "Nova Sess√£o" (azul) 2) Selecione cliente no dropdown 3) Escolha data no calend√°rio 4) Defina hor√°rio 5) Adicione valor (R$) 6) Salve. DICAS: Arraste sess√µes para reagendar, clique nos bot√µes Dia/Semana/M√™s para trocar visualiza√ß√£o, use bot√µes Hoje/setas para navegar.'
      }
      if (message.includes('google') || message.includes('sincronizar')) {
        return 'üîó GOOGLE CALENDAR: Conecte em Configura√ß√µes > Integra√ß√µes > "Conectar Google Calendar". Autorize o acesso e suas sess√µes aparecer√£o automaticamente no Google. √ötil para n√£o perder compromissos!'
      }
      return 'üìÖ AGENDA: Visualize sess√µes por dia/semana/m√™s. Crie sess√µes clicando "Nova Sess√£o", reagende arrastando e soltando, edite clicando no l√°pis. Status: agendada (azul), realizada (verde), cancelada (vermelho).'
    }
    
    // Clientes - detalhado
    if (message.includes('cliente') || message.includes('paciente')) {
      if (message.includes('como') || message.includes('usar') || message.includes('utilizar')) {
        return 'üë• COMO USAR CLIENTES: 1) Menu lateral > "Clientes" 2) Bot√£o azul "Novo Cliente" 3) Preencha: nome*, telefone*, email*, endere√ßo, observa√ß√µes cl√≠nicas 4) Salve. Para editar: clique no cliente > bot√£o "Editar". Veja hist√≥rico de sess√µes na ficha.'
      }
      if (message.includes('hist√≥rico') || message.includes('sess√µes')) {
        return 'üìã HIST√ìRICO DO CLIENTE: Na ficha de cada cliente voc√™ v√™ todas as sess√µes (datas, valores, status), pode adicionar anota√ß√µes cl√≠nicas importantes e acompanhar evolu√ß√£o do tratamento. √ötil para relat√≥rios!'
      }
      return 'üë• CLIENTES: Cadastre pacientes com dados completos, mantenha hist√≥rico de sess√µes, adicione anota√ß√µes cl√≠nicas. Busque por nome/telefone. Cada cliente tem ficha individual com todas as informa√ß√µes.'
    }
    
    // Pagamentos - detalhado  
    if (message.includes('pagamento') || message.includes('financeiro') || message.includes('dinheiro') || message.includes('valor') || message.includes('receita')) {
      if (message.includes('como') || message.includes('usar') || message.includes('utilizar')) {
        return 'üí∞ COMO USAR PAGAMENTOS: 1) Defina valores ao criar sess√µes 2) Marque status: "Pendente"‚Üí"Pago" ap√≥s receber 3) Use filtros (per√≠odo, status, cliente) 4) Veja totais: receita mensal, valores pendentes. Para relat√≥rio: bot√£o "Exportar".'
      }
      return 'üí∞ PAGAMENTOS: Controle total das finan√ßas! Acompanhe valores de sess√µes, marque como pago/pendente, veja receita mensal (R$ 3.450), valores em atraso, e gere relat√≥rios financeiros detalhados.'
    }
    
    // Relat√≥rios - detalhado
    if (message.includes('relat√≥rio') || message.includes('relatorio') || message.includes('exportar') || message.includes('pdf') || message.includes('excel')) {
      if (message.includes('como') || message.includes('usar') || message.includes('utilizar')) {
        return 'üìä COMO USAR RELAT√ìRIOS: 1) Menu > "Relat√≥rios" 2) Escolha per√≠odo (m√™s/ano) 3) Selecione tipo: Geral (vis√£o geral), Financeiro (receitas/gastos), Por Cliente (individual) 4) Clique "Gerar" 5) "Exportar PDF" ou "Excel" para salvar.'
      }
      return 'üìä RELAT√ìRIOS: An√°lises completas! Gere relat√≥rios de receita mensal/anual, n√∫mero de sess√µes, clientes ativos, taxa de ocupa√ß√£o. Exporte em PDF/Excel para apresenta√ß√µes ou imposto de renda.'
    }
    
    // Configura√ß√µes - detalhado
    if (message.includes('configura√ß√£o') || message.includes('configuracao') || message.includes('perfil') || message.includes('conta')) {
      if (message.includes('como') || message.includes('usar') || message.includes('utilizar')) {
        return '‚öôÔ∏è COMO USAR CONFIGURA√á√ïES: 1) Clique seu avatar (canto superior direito) > "Configura√ß√µes" 2) Abas dispon√≠veis: Perfil (dados pessoais), P√°gina (agendamento online), Notifica√ß√µes (lembretes), Integra√ß√µes (Google). Edite e salve as altera√ß√µes.'
      }
      if (message.includes('p√°gina') || message.includes('agendamento') || message.includes('link')) {
        return 'üîó P√ÅGINA DE AGENDAMENTO: Em Configura√ß√µes > P√°gina, personalize sua p√°gina p√∫blica onde clientes podem agendar sess√µes online. Adicione foto, hor√°rios dispon√≠veis, valores. Compartilhe o link!'
      }
      return '‚öôÔ∏è CONFIGURA√á√ïES: Personalize tudo! Edite perfil profissional, configure p√°gina de agendamento online, ajuste notifica√ß√µes, integre Google Calendar. Acesse pelo seu avatar no canto superior direito.'
    }
    
    // Planos e Upgrade
    if (message.includes('plano') || message.includes('assinatura') || message.includes('upgrade') || message.includes('premium') || message.includes('limite')) {
      return 'üíé PLANOS: B√°sico (GRATUITO: 4 sess√µes/cliente), Profissional (R$29,90: 20 clientes, relat√≥rios), Premium (R$59,90: ILIMITADO, todas as funcionalidades). Para upgrade: Menu > "Upgrade" > Escolha plano > Pague.'
    }
    
    // Estudos - detalhado
    if (message.includes('estudo') || message.includes('curso') || message.includes('artigo') || message.includes('aprendizado') || message.includes('material')) {
      if (message.includes('como') || message.includes('usar') || message.includes('utilizar')) {
        return 'üìö COMO USAR ESTUDOS: 1) Menu > "Estudos" 2) Use filtros: √Årea (psicologia, psican√°lise), Tipo (artigo, v√≠deo, curso), N√≠vel (iniciante, avan√ßado) 3) Busque por palavra-chave 4) Clique "Acessar" para abrir conte√∫do. Todos os links s√£o verificados!'
      }
      return 'üìö ESTUDOS: Biblioteca completa! Artigos cient√≠ficos, cursos gratuitos, v√≠deos educacionais, webinars especializados. Filtre por √°rea e n√≠vel. Conte√∫do constantemente atualizado para seu desenvolvimento profissional.'
    }
    
    // Notifica√ß√µes
    if (message.includes('notifica√ß√£o') || message.includes('notificacao') || message.includes('lembrete') || message.includes('aviso')) {
      return 'üîî NOTIFICA√á√ïES: Receba lembretes de sess√µes do dia seguinte, avisos de novos agendamentos, alertas de pagamentos pendentes. Configure em Configura√ß√µes > Notifica√ß√µes (email/push).'
    }
    
    // Google Calendar integra√ß√£o espec√≠fica
    if (message.includes('google') || message.includes('calendar') || message.includes('sincronizar') || message.includes('integra√ß√£o')) {
      return 'üìÖ GOOGLE CALENDAR: Para conectar: Configura√ß√µes > Integra√ß√µes > "Conectar Google Calendar" > Autorizar acesso. Suas sess√µes do TherapyPro aparecer√£o automaticamente no Google Calendar. Sincroniza√ß√£o bidirecional!'
    }
    
    // Problemas t√©cnicos
    if (message.includes('erro') || message.includes('problema') || message.includes('n√£o funciona') || message.includes('bug')) {
      return 'üîß PROBLEMAS T√âCNICOS: 1) Atualize a p√°gina (F5) 2) Limpe cache do navegador 3) Verifique conex√£o com internet 4) Se Google Calendar n√£o conecta, verifique se permitiu todas as permiss√µes. Persiste? Contate suporte!'
    }
    
    // Dicas gerais de uso
    if (message.includes('dica') || message.includes('sugest√£o') || message.includes('melhor forma')) {
      return 'üí° DICAS PRO: 1) Use atalhos: Ctrl+N (nova sess√£o), Tab para navegar 2) Configure lembretes autom√°ticos 3) Exporte relat√≥rios mensalmente 4) Integre Google Calendar 5) Use filtros nas buscas 6) Mantenha dados dos clientes atualizados!'
    }
    
    // Sistema inteligente de an√°lise contextual
    if (message.includes('n√£o') && (message.includes('funciona') || message.includes('carrega'))) {
      return 'üîß PROBLEMA IDENTIFICADO: Entendo que algo n√£o est√° funcionando. Para te ajudar melhor, me informe: 1) Qual se√ß√£o espec√≠fica? (agenda, clientes, pagamentos...) 2) Que erro aparece? 3) Em que momento ocorre? Com essas informa√ß√µes, posso dar uma solu√ß√£o precisa!'
    }
    
    if (message.includes('arrastar') || message.includes('mover') || message.includes('reagendar')) {
      return 'üìÖ ARRASTAR SESS√ïES: Na agenda, para reagendar: 1) Clique e segure a sess√£o 2) Arraste para a nova data 3) Solte. DICA: Use as visualiza√ß√µes Dia/Semana/M√™s para facilitar. Se n√£o funcionar, verifique se a sess√£o n√£o est√° bloqueada ou use o bot√£o "Editar" (l√°pis).'
    }
    
    if (message.includes('piscando') || message.includes('pisca') || message.includes('tela') || message.includes('carregando')) {
      return '‚ö° PROBLEMA DE CARREGAMENTO: Isso pode ser lentid√£o na conex√£o. Solu√ß√µes: 1) Atualize a p√°gina (F5) 2) Limpe cache do navegador 3) Verifique internet 4) Se persiste, aguarde alguns segundos. O sistema sincroniza automaticamente.'
    }

    if (message.includes('google') && message.includes('erro')) {
      return 'üîó ERRO GOOGLE CALENDAR: Problemas comuns: 1) Reautorize: Configura√ß√µes > Integra√ß√µes > Desconectar > Conectar novamente 2) Verifique permiss√µes no Google 3) Autorize acesso ao calend√°rio. Se ainda n√£o funcionar, pode ser configura√ß√£o da API do Google.'
    }

    if (message.includes('sincroniz') || message.includes('tempo real') || message.includes('atualiz')) {
      return 'üîÑ SINCRONIZA√á√ÉO: O sistema atualiza automaticamente! Mudan√ßas aparecem em segundos. Se n√£o v√™ as altera√ß√µes: 1) Aguarde 5 segundos 2) Atualize p√°gina (F5) 3) Verifique conex√£o. Todas as a√ß√µes (criar, editar, excluir) sincronizam instantaneamente.'
    }

    // Resposta inteligente padr√£o com an√°lise contextual
    return 'ü§ñ ASSISTENTE INTELIGENTE: Analisei sua mensagem e posso te ajudar com qualquer funcionalidade do TherapyPro! Sobre o que precisa de ajuda? üìä Dashboard, üìÖ Agenda, üë• Clientes, üí∞ Pagamentos, üìä Relat√≥rios, ‚öôÔ∏è Configura√ß√µes, üìö Estudos, üîó Integra√ß√µes. Descreva o problema espec√≠fico para uma solu√ß√£o personalizada!'
  }

  const sendMessage = async () => {
    if (!inputMessage.trim()) return

    const userMessage: Message = {
      id: Date.now().toString(),
      text: inputMessage,
      isBot: false,
      timestamp: new Date()
    }

    setMessages(prev => [...prev, userMessage])
    const currentMessage = inputMessage
    setInputMessage('')
    setIsLoading(true)

    try {
      const responseText = await getBotResponse(currentMessage)
      const botResponse: Message = {
        id: (Date.now() + 1).toString(),
        text: responseText,
        isBot: true,
        timestamp: new Date()
      }
      setMessages(prev => [...prev, botResponse])
    } catch (error) {
      console.error('Erro ao enviar mensagem:', error)
      const errorResponse: Message = {
        id: (Date.now() + 1).toString(),
        text: 'Desculpe, ocorreu um erro. Tente novamente.',
        isBot: true,
        timestamp: new Date()
      }
      setMessages(prev => [...prev, errorResponse])
    } finally {
      setIsLoading(false)
    }
  }

  // Salvar mensagens no localStorage
  useEffect(() => {
    localStorage.setItem('chatbot-messages', JSON.stringify(messages))
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" })
  }, [messages])

  // Auto-remover conversas antigas ap√≥s inatividade
  useEffect(() => {
    const clearOldConversations = () => {
      const lastActivity = localStorage.getItem('chatbot-last-activity')
      if (lastActivity) {
        const timeDiff = Date.now() - parseInt(lastActivity)
        // Limpar ap√≥s 30 minutos de inatividade
        if (timeDiff > 30 * 60 * 1000) {
          localStorage.removeItem('chatbot-messages')
          localStorage.removeItem('chatbot-last-activity')
          setMessages([{
            id: '1',
            text: 'Ol√°! Sou a assistente virtual do **TherapyPro**. Como posso **ajud√°-lo**?',
            isBot: true,
            timestamp: new Date()
          }])
        }
      }
    }

    const interval = setInterval(clearOldConversations, 60000) // Verificar a cada minuto
    return () => clearInterval(interval)
  }, [])

  // Registrar atividade do usu√°rio
  useEffect(() => {
    localStorage.setItem('chatbot-last-activity', Date.now().toString())
  }, [messages])

  if (!isOpen) {
    return (
      <div className="fixed bottom-6 right-6 z-50">
        <Button
          onClick={() => setIsOpen(true)}
          className="w-14 h-14 rounded-full bg-gradient-primary hover:opacity-90 shadow-lg"
          size="icon"
        >
          <MessageCircle className="w-6 h-6 text-white" />
        </Button>
      </div>
    )
  }

  return (
    <div className="fixed bottom-6 right-6 z-50">
      <Card className="w-80 h-96 shadow-xl">
        <CardHeader className="py-3 px-4 bg-gradient-primary text-white rounded-t-lg">
          <div className="flex items-center justify-between">
            <CardTitle className="text-sm">Assistente TherapyPro</CardTitle>
            <Button
              variant="ghost"
              size="icon"
              className="w-6 h-6 text-white hover:bg-white/20"
              onClick={() => setIsOpen(false)}
            >
              <X className="w-3 h-3" />
            </Button>
          </div>
        </CardHeader>

        <CardContent className="p-4 h-64 overflow-y-auto">
          <div className="space-y-3">
            {messages.map((message) => (
              <div
                key={message.id}
                className={`flex ${message.isBot ? 'justify-start' : 'justify-end'}`}
              >
                <div
                  className={`max-w-[80%] p-2 rounded-lg text-sm ${
                    message.isBot
                      ? 'bg-muted text-muted-foreground'
                      : 'bg-primary text-primary-foreground'
                  }`}
                >
                  <div dangerouslySetInnerHTML={{
                    __html: DOMPurify.sanitize(message.text.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>'))
                  }} />
                </div>
              </div>
            ))}
            {isLoading && (
              <div className="flex justify-start">
                <div className="bg-muted text-muted-foreground p-2 rounded-lg text-sm">
                  Digitando...
                </div>
              </div>
            )}
            <div ref={messagesEndRef} />
          </div>
        </CardContent>

        <CardFooter className="p-3 border-t">
          <div className="flex gap-2 w-full">
            <Input
              value={inputMessage}
              onChange={(e) => setInputMessage(e.target.value)}
              onKeyDown={(e) => e.key === 'Enter' && sendMessage()}
              placeholder="Digite sua d√∫vida..."
              className="flex-1 text-sm"
            />
            <Button onClick={sendMessage} size="icon" className="bg-primary">
              <Send className="w-4 h-4" />
            </Button>
          </div>
        </CardFooter>
      </Card>
    </div>
  )
}

export default ChatBot